[MAIN]
# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use, and will cap the count on Windows to
# avoid hangs.
jobs = 0

# Pickle collected data for later comparisons.
persistent = yes

# Minimum Python version to use for version dependent checks. Will default to
# the version used to run pylint.
py-version = 3.11

# Add files or directories matching the regex patterns to the ignore-list. The
# regex matches against paths and can be in Posix or Windows format.
ignore-paths = ^assets/.*$,
               ^.venv/.*$,
               ^__pycache__/.*$

[MESSAGES CONTROL]
# Only show warnings with the listed confidence levels. Leave empty to show
# all. Valid levels: HIGH, CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE, UNDEFINED.
confidence = HIGH,
             CONTROL_FLOW,
             INFERENCE,
             INFERENCE_FAILURE,
             UNDEFINED

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once). You can also use "--disable=all" to
# disable everything first and then re-enable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use "--disable=all --enable=classes
# --disable=W".
disable = raw-checker-failed,
          bad-inline-option,
          locally-disabled,
          file-ignored,
          suppressed-message,
          useless-suppression,
          deprecated-pragma,
          use-symbolic-message-instead,
          # Disabled for AI-generated code patterns
          too-many-arguments,
          too-many-locals,
          too-many-branches,
          too-many-statements,
          too-few-public-methods,
          # Disabled for compatibility with external libraries
          import-error,
          no-name-in-module,
          # Disabled for notebook-style code
          global-statement,
          invalid-name,

[REPORTS]
# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio). You can also give a reporter class, e.g.
# mypackage.mymodule.MyReporterClass.
output-format = colorized

# Tells whether to display a full report or only the messages.
reports = no

# Activate the evaluation.
score = yes

[REFACTORING]
# Maximum number of nested blocks for function / method body
max-nested-blocks = 5

# Complete name of functions that never returns. When checking for
# inconsistent-return-statements if a never returning function is called then
# it will be considered as an explicit return statement and no message will be
# printed.
never-returning-functions = sys.exit,argparse.parse_error

[SIMILARITIES]
# Comments are removed from the similarity computation
ignore-comments = yes

# Docstrings are removed from the similarity computation
ignore-docstrings = yes

# Imports are removed from the similarity computation
ignore-imports = yes

# Signatures are removed from the similarity computation
ignore-signatures = yes

# Minimum lines number of a similarity.
min-similarity-lines = 4

[SPELLING]
# Limits count of emitted suggestions when checking for spelling mistakes.
max-spelling-suggestions = 4

# Spelling dictionary name. Available dictionaries: none. To make it work,
# install the 'python-enchant' package.
spelling-dict =

# List of comma separated words that should be considered directives if they
# appear at the beginning of a comment and should not be checked.
spelling-ignore-comment-directives = fmt: off,fmt: on,noqa:,noqa,nosec,isort:skip,mypy:

[STRING]
# This flag controls whether inconsistent-quotes generates a warning when the
# character used as a quote delimiter is used inconsistently within a module.
check-quote-consistency = no

# This flag controls whether the implicit-str-concat should generate a warning
# on implicit string concatenation in sequences defined over several lines.
check-str-concat-over-line-jumps = no

[TYPECHECK]
# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
contextmanager-decorators = contextlib.contextmanager

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
generated-members =

# Tells whether missing members accessed in mixin class should be ignored. A
# class is considered mixin if its name matches the mixin-class-rgx option.
# Tells whether to warn about missing members when the owner of the attribute
# is inferred to be None.
ignore-none = yes

# This flag controls whether pylint should warn about no-member and similar
# checks whenever an opaque object is returned when inferring. The inference
# can return multiple potential results and some of those can be the same in
# all the possible cases. This can happen for example when a context manager
# is in use. By default, the warnings are disabled.
ignore-on-opaque-inference = yes

# List of symbolic message names to ignore for Mixin members.
ignored-checks-for-mixins = no-member,
                            not-async-context-manager,
                            not-context-manager,
                            attribute-defined-outside-init

# List of class names for which member attributes should not be checked (useful
# for classes with dynamically set attributes). This supports the use of
# qualified names.
ignored-classes = optparse.Values,thread._local,_thread._local,argparse.Namespace

[VARIABLES]
# List of additional names supposed to be defined in builtins. Remember that
# you should avoid defining new builtins when possible.
additional-builtins =

# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables = yes

# List of names allowed to shadow builtins
allowed-redefined-builtins =

# List of strings which can identify a callback function by name. A callback
# name must start or end with one of those strings.
callbacks = cb_,
            _cb

# A regular expression matching the name of dummy variables (i.e. expected to
# not be used).
dummy-variables-rgx = _+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_

# Argument names that match this expression will be ignored.
ignored-argument-names = _.*|^ignored_|^unused_

# Tells whether we should check for unused import in __init__ files.
init-import = no

# List of qualified module names which can have objects that can redefine
# builtins.
redefining-builtins-modules = six.moves,past.builtins,future.builtins,builtins,io
